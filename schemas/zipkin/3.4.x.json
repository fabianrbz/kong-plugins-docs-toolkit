{
  "entity_checks": [

  ],
  "fields": [
    {
      "protocols": {
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "elements": {
          "description": "A string representing a protocol, such as HTTP or HTTPS.",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https",
            "tcp",
            "tls",
            "tls_passthrough",
            "udp",
            "ws",
            "wss"
          ],
          "type": "string"
        },
        "type": "set",
        "description": "A set of strings representing protocols.",
        "required": true
      }
    },
    {
      "consumer_group": {
        "type": "foreign",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "eq": null,
        "reference": "consumer_groups"
      }
    },
    {
      "config": {
        "fields": [
          {
            "local_service_name": {
              "description": "The name of the service as displayed in Zipkin.",
              "default": "kong",
              "required": true,
              "type": "string"
            }
          },
          {
            "http_endpoint": {
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "sample_ratio": {
              "between": [
                0,
                1
              ],
              "default": 0.001,
              "description": "How often to sample requests that do not contain trace IDs. Set to `0` to turn sampling off, or to `1` to sample **all** requests. ",
              "type": "number"
            }
          },
          {
            "default_service_name": {
              "description": "Set a default service name to override `unknown-service-name` in the Zipkin spans.",
              "type": "string"
            }
          },
          {
            "include_credential": {
              "description": "Specify whether the credential of the currently authenticated consumer should be included in metadata sent to the Zipkin server.",
              "default": true,
              "required": true,
              "type": "boolean"
            }
          },
          {
            "traceid_byte_count": {
              "default": 16,
              "type": "integer",
              "description": "The length in bytes of each request's Trace ID.",
              "required": true,
              "one_of": [
                8,
                16
              ]
            }
          },
          {
            "header_type": {
              "default": "preserve",
              "type": "string",
              "description": "All HTTP requests going through the plugin are tagged with a tracing HTTP request. This property codifies what kind of tracing header the plugin expects on incoming requests",
              "required": true,
              "one_of": [
                "preserve",
                "ignore",
                "b3",
                "b3-single",
                "w3c",
                "jaeger",
                "ot",
                "aws",
                "datadog"
              ]
            }
          },
          {
            "default_header_type": {
              "default": "b3",
              "type": "string",
              "description": "Allows specifying the type of header to be added to requests with no pre-existing tracing headers and when `config.header_type` is set to `\"preserve\"`. When `header_type` is set to any other value, `default_header_type` is ignored.",
              "required": true,
              "one_of": [
                "b3",
                "b3-single",
                "w3c",
                "jaeger",
                "ot",
                "aws",
                "datadog"
              ]
            }
          },
          {
            "tags_header": {
              "description": "The Zipkin plugin will add extra headers to the tags associated with any HTTP requests that come with a header named as configured by this property.",
              "default": "Zipkin-Tags",
              "required": true,
              "type": "string"
            }
          },
          {
            "static_tags": {
              "description": "The tags specified on this property will be added to the generated request traces.",
              "elements": {
                "fields": [
                  {
                    "name": {
                      "type": "string",
                      "required": true,
                      "not_one_of": [
                        "error",
                        "http.method",
                        "http.path",
                        "http.status_code",
                        "kong.balancer.state",
                        "kong.balancer.try",
                        "kong.consumer",
                        "kong.credential",
                        "kong.node.id",
                        "kong.route",
                        "kong.service",
                        "lc",
                        "peer.hostname"
                      ]
                    }
                  },
                  {
                    "value": {
                      "required": true,
                      "type": "string"
                    }
                  }
                ],
                "type": "record"
              },
              "type": "array"
            }
          },
          {
            "http_span_name": {
              "default": "method",
              "type": "string",
              "description": "Specify whether to include the HTTP path in the span name.",
              "required": true,
              "one_of": [
                "method",
                "method_path"
              ]
            }
          },
          {
            "connect_timeout": {
              "between": [
                0,
                2147483646
              ],
              "default": 2000,
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "type": "integer"
            }
          },
          {
            "send_timeout": {
              "between": [
                0,
                2147483646
              ],
              "default": 5000,
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "type": "integer"
            }
          },
          {
            "read_timeout": {
              "between": [
                0,
                2147483646
              ],
              "default": 5000,
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "type": "integer"
            }
          },
          {
            "http_response_header_for_traceid": {
              "type": "string"
            }
          },
          {
            "phase_duration_flavor": {
              "default": "annotations",
              "type": "string",
              "description": "Specify whether to include the duration of each phase as an annotation or a tag.",
              "required": true,
              "one_of": [
                "annotations",
                "tags"
              ]
            }
          },
          {
            "queue": {
              "fields": [
                {
                  "max_batch_size": {
                    "between": [
                      1,
                      1000000
                    ],
                    "default": 1,
                    "description": "Maximum number of entries that can be processed at a time.",
                    "type": "integer"
                  }
                },
                {
                  "max_coalescing_delay": {
                    "between": [
                      0,
                      3600
                    ],
                    "default": 1,
                    "description": "Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.",
                    "type": "number"
                  }
                },
                {
                  "max_entries": {
                    "between": [
                      1,
                      1000000
                    ],
                    "default": 10000,
                    "description": "Maximum number of entries that can be waiting on the queue.",
                    "type": "integer"
                  }
                },
                {
                  "max_bytes": {
                    "type": "integer",
                    "description": "Maximum number of bytes that can be waiting on a queue, requires string content."
                  }
                },
                {
                  "max_retry_time": {
                    "description": "Time in seconds before the queue gives up calling a failed handler for a batch.",
                    "default": 60,
                    "type": "number"
                  }
                },
                {
                  "initial_retry_delay": {
                    "between": [
                      0.001,
                      1000000
                    ],
                    "default": 0.01,
                    "description": "Time in seconds before the initial retry is made for a failing batch.",
                    "type": "number"
                  }
                },
                {
                  "max_retry_delay": {
                    "between": [
                      0.001,
                      1000000
                    ],
                    "default": 60,
                    "description": "Maximum time in seconds between retries, caps exponential backoff.",
                    "type": "number"
                  }
                }
              ],
              "required": true,
              "type": "record"
            }
          }
        ],
        "required": true,
        "type": "record"
      }
    }
  ]
}